<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake Game</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Classic Snake Game</h1>
    <canvas id="gameCanvas" width="400" height="400"></canvas>
    <script src="game.js"></script>
</body>
</html>

body {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #333;
    color: #fff;
    font-family: 'Courier New', Courier, monospace;
}

canvas {
    background-color: #000;
    border: 2px solid #fff;
}

// Get the canvas element from the HTML
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// Define the size of each grid cell (e.g., the snake's body parts)
const gridSize = 20;
let tileCount = canvas.width / gridSize;

// Snake's initial position and properties
let snake = [
    { x: 10, y: 10 } // Start in the middle
];
let direction = 'right';
let dx = 1; // Direction in x-axis
let dy = 0; // Direction in y-axis

// Food's initial position
let food = { x: 15, y: 15 };

// Game state
let score = 0;
let gameOver = false;

// --- Main Game Loop ---
function gameLoop() {
    if (gameOver) {
        ctx.fillStyle = 'white';
        ctx.font = '50px "Courier New"';
        ctx.fillText('Game Over', canvas.width / 4, canvas.height / 2);
        return;
    }

    // This function will be called repeatedly
    setTimeout(function() {
        clearScreen();
        moveSnake();
        drawFood();
        drawSnake();
        checkCollision();
        requestAnimationFrame(gameLoop);
    }, 100); // Game speed - lower number is faster
}

// Start the game loop
requestAnimationFrame(gameLoop);

// --- Game Functions ---

function clearScreen() {
    ctx.fillStyle = 'black';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
}

function drawSnake() {
    ctx.fillStyle = 'lime';
    snake.forEach(part => {
        ctx.fillRect(part.x * gridSize, part.y * gridSize, gridSize - 2, gridSize - 2);
    });
}

function moveSnake() {
    // Create a new head for the snake in the current direction
    const head = { x: snake[0].x + dx, y: snake[0].y + dy };
    snake.unshift(head); // Add new head to the front of the snake array

    // Check if the snake has eaten the food
    if (head.x === food.x && head.y === food.y) {
        score++;
        generateFood(); // Create new food
    } else {
        snake.pop(); // Remove the tail
    }
}

function generateFood() {
    food.x = Math.floor(Math.random() * tileCount);
    food.y = Math.floor(Math.random() * tileCount);

    // Ensure food doesn't spawn on the snake
    snake.forEach(part => {
        if (part.x === food.x && part.y === food.y) {
            generateFood();
        }
    });
}

function drawFood() {
    ctx.fillStyle = 'red';
    ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize, gridSize);
}

function checkCollision() {
    const head = snake[0];

    // Wall collision
    if (head.x < 0 || head.x >= tileCount || head.y < 0 || head.y >= tileCount) {
        gameOver = true;
    }

    // Self collision (check if head hits any other part of the body)
    for (let i = 1; i < snake.length; i++) {
        if (head.x === snake[i].x && head.y === snake[i].y) {
            gameOver = true;
            break;
        }
    }
}

// --- Event Listener for Controls ---

document.addEventListener('keydown', changeDirection);

function changeDirection(event) {
    const keyPressed = event.key;

    // Prevent the snake from reversing on itself
    const goingUp = (dy === -1);
    const goingDown = (dy === 1);
    const goingLeft = (dx === -1);
    const goingRight = (dx === 1);

    if (keyPressed === 'ArrowUp' && !goingDown) {
        dx = 0;
        dy = -1;
    }
    if (keyPressed === 'ArrowDown' && !goingUp) {
        dx = 0;
        dy = 1;
    }
    if (keyPressed === 'ArrowLeft' && !goingRight) {
        dx = -1;
        dy = 0;
    }
    if (keyPressed === 'ArrowRight' && !goingLeft) {
        dx = 1;
        dy = 0;
    }
}
